%{
	#include <iostream>
	#include "yystype.h"
	#include "parser_utils.h"
	#include "hw3_output.hpp"
	#include "bp.hpp"
	#include <string>
	// #define YYDEBUG 1
	// #define YYERROR_VERBOSE 1
	#define BUFF CodeBuffer::instance()

    using namespace std;
	using namespace output;

    int yylex();
	extern int yylineno;
    void yyerror(char const*);
	typedef std::pair<int, BranchLabelIndex> addrPair;

%}
////////////TODO ASK DANIAL///////////////

/* %union{
	int val;
	string text;
}; */
%nonassoc VOID INT BYTE B BOOL TRUE FALSE
 	   RETURN WHILE BREAK CONTINUE SWITCH DEFAULT COLON SC 
       COMMA LBRACE RBRACE IF CASE HELSE NUM ID STRING
%nonassoc ELSE
%right ASSIGN
%left OR
%left AND
%left EQUAL NEQUAL
%nonassoc LT LTE GT GTE
%left ADD SUB
%left MULT DIV
%right NOT
%left LPAREN RPAREN

%%

Program : Funcs 												        {printProductionRule(1);}
;

Funcs :	/*epsilon*/													        {printProductionRule(2);}
	  | FuncDecl Funcs 														{printProductionRule(3);}
;

FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE {prevDefCheck($2->name); addFunDef($1->name, $2->name, $4->pNames, $4->pTypes); initVarStack();} Statements RBRACE 		{exitScope();}
;

RetType : Type 																{$$ = $1;}
		| VOID 																{$$ = new Type("VOID");}
;

Formals : /*epsilon*/														{$$ = new Type("");}
		| FormalsList 														{$$ = $1;}
;

FormalsList : FormalDecl 													{$$ = $1;}
			| FormalDecl COMMA FormalsList 									{$$ = $3; $$->pNames.push_back($1->pNames[0]); $$->pTypes.push_back($1->pTypes[0]);}
;

FormalDecl : Type ID 														{$$ = new Formals($2->name, $1->name);}
;

Statements : Statment 														{printProductionRule(12);}
		   | Statements Statment 											{printProductionRule(13);}
;

Statment : LBRACE {enterScope("");} Statements RBRACE 		{exitScope();}
		 | Type ID SC 														{prevDefCheck($2->name); addVarToSymTable($1->name, $2->name, 0); initVar($2->name, 0);}
		 | Type ID ASSIGN Exp SC 											{prevDefCheck($2->name); checkTypeMatch($1->name, $4->type); addVarToSymTable($1->name, $2->name, $4->val); initVar($2->name, $4->val);}
		 | ID ASSIGN Exp SC 												{ checkTypeMatch(getTypeById($1->name), $3->type);  changeValOfVar($1->name, $3->val); initVar($1->name, $3->val);}
		 | Call SC 															{printProductionRule(18);}
		 | RETURN SC 														{checkRetMatchesFunc("");}
		 | RETURN Exp SC 													{checkRetMatchesFunc($2->type);}
		 | IF LPAREN Exp M1 RPAREN M M2 Statment M3 %prec HELSE 				{BUFF.bpatch($3->trueList, $6->label); $$ = new Exp("");
		 																	$$->nextList = BUFF.merge($3->falseList, $8->nextList);}								
		 | IF LPAREN Exp M1 RPAREN M M2 Statment M3 ELSE N M M2 Statment M3		{BUFF.bpatch($3->trueList, $6->label);	$$ = new Exp("");
																					BUFF.bpatch($3->falseList, $12->label);
																					std::vector<addrPair> temp = BUFF.merge($8->nextList, $10->nextList);
																					$$->nextList = BUFF.merge(temp, $14->nextList);}
		 | WHILE M LPAREN Exp M1 RPAREN M M4 Statment M3 							{BUFF.bpatch($9->nextList, $2->label); BUFF.bpatch($4->trueList, $7->label);
																					$$ = new Exp(""); $$->nextList = BUFF.merge($4->falseList, $9->breakList); BUFF.emit("br label " + $2->label);}	
		 | BREAK SC 														{checkBreak(); int addr = BUFF.emit("br label @"); $$ = new Exp(""); $$->breakList = BUFF.makelist(addrPair(addr, FIRST));}
		 | CONTINUE SC 														{checkContinue(); int addr = BUFF.emit("br label @"); $$ = new Exp(""); $$->nextList = BUFF.makelist(addrPair(addr, FIRST));}
		 | SWITCH LPAREN Exp {checkRelop($3, $3);} RPAREN LBRACE {enterScope("SWITCH");} CaseList RBRACE {exitScope();}                 {printProductionRule(26);}
;

N : /* epsilon */															{$$ = new Exp(""); int addr = BUFF.emit("br label @"); $$->nextList = BUFF.makelist(addrPair(addr, FIRST));}											
;

M : /* epsilon */															{$$ = new Exp(""); $$->label = BUFF.genLabel();}											
;

M1 : /* epsilon */															{YYSTYPE e = yyvsp[0]; checkBool(e, e);}											
;

M2 : /* epsilon */															{enterScope("");}											
;

M3 : /* epsilon */															{exitScope();}											
;

M4 : /* epsilon */															{enterScope("WHILE");}											
;

Call : ID LPAREN ExpList RPAREN 											{$$ = funCall($1->name, $3->pTypes);}
	 | ID LPAREN RPAREN 													{$$ = funCall($1->name, std::vector<std::string>());}
;

ExpList : Exp 																{$1->pTypes.push_back($1->type); $$ = $1;}
		| Exp COMMA ExpList 												{$3->pTypes.push_back($1->type); $$ = $3;}
;

Type : INT 																	{$$ = new Type("INT");}
	 | BYTE 																{$$ = new Type("BYTE");}
     | BOOL 																{$$ = new Type("BOOL");}
;


Exp : LPAREN Exp RPAREN 													{$$ = $2;}
    | Exp ADD Exp 														{$$ = doBinop($1, $3, "add");}
    | Exp SUB Exp 														{$$ = doBinop($1, $3, "sub");}
    | Exp MULT Exp 														{$$ = doBinop($1, $3, "mul");}
    | Exp DIV Exp 														{$$ = doBinop($1, $3, "sdiv");}
	| ID 																	{$$ = getById($1);}
	| Call 																	{printProductionRule(37);}
	| NUM 																	{$$ = $1;}
	| NUM B 																{checkByte($1->val); $$ = $1; $$->type = "BYTE";}
	| STRING 																{$$ = $1;}
	| TRUE 																	{$$ = $1; $$->trueList = doList();}
	| FALSE 																{$$ = $1; $$->falseList = doList();}
	| NOT Exp 																{checkNot($2); $$ = $2; $$->trueList = $2->falseList; $$->falseList = $2->trueList;}
	| Exp AND {$$ = new Exp("BOOL"); $$->label = BUFF.genLabel();} Exp 			{checkBool($1,$3);  BUFF.bpatch($1->trueList, $3->label);
																									$$->trueList = $4->trueList;
																									$$->falseList = BUFF.merge($1->falseList, $4->falseList);}
	| Exp OR {$$ = new Exp("BOOL"); $$->label = BUFF.genLabel();} Exp 			{checkBool($1,$3);  BUFF.bpatch($1->falseList, $3->label);
																									$$->trueList = BUFF.merge($1->trueList, $4->trueList);
																									$$->falseList = $4->falseList;}
	| Exp LT Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "slt");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
	| Exp LTE Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "sle");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
	| Exp GT Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "sgt");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
	| Exp GTE Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "sge");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
	| Exp EQUAL Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "eq");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
	| Exp NEQUAL Exp 												    	{checkRelop($1, $3); $$ = new Exp("BOOL"); int addr = doRelop($1->reg, $3->reg, "ne");
																									$$->trueList = BUFF.makelist(addrPair(addr, FIRST));
																									$$->falseList = BUFF.makelist(addrPair(addr, SECOND)); }
;

CaseList : CaseDecl CaseList	                                            {printProductionRule(48);}
		 | CaseDecl	                                                        {printProductionRule(49);}
		 | DEFAULT COLON Statements	                                        {printProductionRule(50);}

CaseDecl : CASE NUM COLON Statements	                                    {printProductionRule(51);}



%%


////////////TODO ASK DANIAL///////////////

int main()
{
	/* yydebug = 1; */
	enterScope("");
	addFunDefPrint("VOID", "print", std::vector<std::string>(), std::vector<std::string>{"STRING"} );
	addFunDefPrint("VOID", "printi", std::vector<std::string>(), std::vector<std::string>{"INT"} );
	BUFF.addBegCodetoBuffer();
	int parseRes = yyparse();
	checkForMain();
	exitScope();
	BUFF.printCodeBuffer();
    return parseRes;
}

void yyerror(char const* s){
	errorSyn(yylineno);
	exit(0);
}
